"use server"

import { createServerClient } from "@/lib/supabase/server"
import { puppeteerService } from "@/lib/utils/puppeteer-utils"
import path from "path"
import fs from "fs/promises"

/**
 * Generate a PDF report for a shop
 */
export async function generateShopReport(shopId: string): Promise<{ success: boolean; url?: string; error?: string }> {
  try {
    // Create output directory if it doesn't exist
    const outputDir = path.join(process.cwd(), "public", "reports")
    await fs.mkdir(outputDir, { recursive: true })

    // Generate unique filename
    const filename = `shop-report-${shopId}-${Date.now()}.pdf`
    const outputPath = path.join(outputDir, filename)
    const publicUrl = `/reports/${filename}`

    // Get shop data
    const supabase = createServerClient()
    const { data: shop, error } = await supabase
      .from("shops")
      .select(`
        *,
        flavors:shop_flavors(*)
      `)
      .eq("id", shopId)
      .single()

    if (error || !shop) {
      throw new Error(error?.message || "Shop not found")
    }

    // Create a temporary HTML file for the report
    const reportHtml = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <title>Shop Report: ${shop.name}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
            h1 { color: #3b82f6; }
            .section { margin-bottom: 20px; }
            table { width: 100%; border-collapse: collapse; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
          </style>
        </head>
        <body>
          <h1>Shop Report: ${shop.name}</h1>
          
          <div class="section">
            <h2>Shop Information</h2>
            <p><strong>Address:</strong> ${shop.address || "N/A"}</p>
            <p><strong>Phone:</strong> ${shop.phone || "N/A"}</p>
            <p><strong>Website:</strong> ${shop.website || "N/A"}</p>
            <p><strong>Description:</strong> ${shop.description || "N/A"}</p>
          </div>
          
          <div class="section">
            <h2>Flavors (${shop.flavors?.length || 0})</h2>
            <table>
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Category</th>
                  <th>Rating</th>
                </tr>
              </thead>
              <tbody>
                ${
                  shop.flavors
                    ?.map(
                      (flavor) => `
                  <tr>
                    <td>${flavor.name}</td>
                    <td>${flavor.category || "N/A"}</td>
                    <td>${flavor.average_rating || "N/A"}</td>
                  </tr>
                `,
                    )
                    .join("") || '<tr><td colspan="3">No flavors available</td></tr>'
                }
              </tbody>
            </table>
          </div>
          
          <div class="section">
            <h2>Performance Metrics</h2>
            <p><strong>Average Rating:</strong> ${shop.average_rating || "N/A"}</p>
            <p><strong>Total Reviews:</strong> ${shop.review_count || 0}</p>
          </div>
          
          <footer>
            <p>Generated by ConeDex on ${new Date().toLocaleDateString()}</p>
          </footer>
        </body>
      </html>
    `

    const tempHtmlPath = path.join(outputDir, `temp-${shopId}.html`)
    await fs.writeFile(tempHtmlPath, reportHtml)

    // Generate PDF from the HTML file
    const tempHtmlUrl = `file://${tempHtmlPath}`
    await puppeteerService.generatePDF(tempHtmlUrl, outputPath, {
      format: "A4",
      printBackground: true,
    })

    // Clean up temporary HTML file
    await fs.unlink(tempHtmlPath)

    // Return the public URL to the PDF
    return {
      success: true,
      url: publicUrl,
    }
  } catch (error) {
    console.error("Error generating shop report:", error)
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error generating report",
    }
  } finally {
    // Always close the browser
    await puppeteerService.closeBrowser()
  }
}
